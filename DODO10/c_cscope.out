cscope 15 $HOME/git/bTest/DODO10 -c               0000007957
	@c2DodoSel.cpp

18 #include 
	~<stdlib.h
>

20 #include 
	~<stdio.h
>

21 #include 
	~<stdlib.h
>

22 #include 
	~<sqlite3.h
>

24 static int 
	$callback
(void *
NotUsed
, int 
argc
, char **
argv
, char **
azColName
) {

25 int 
i
;

26 for(
i
 = 0; i<
argc
; i++) {

27 
	`printf
("%s = %s\n", 
azColName
[
i
], 
argv
[i] ? argv[i] : "NULL");

29 
	`printf
("\n");

31 
	}
}

34 int 
	$main
(int 
argc
, char* 
argv
[]) {

35 
sqlite3
 *
db
;

36 char *
zErrMsg
 = 0;

37 int 
rc
;

38 char *
sql
;

39 const char* 
data
 = "Callback function called";

42 
rc
 = 
	`sqlite3_open
("dodo10.db", &
db
);

44 if( 
rc
 ) {

45 
	`fprintf
(
stderr
, "Can't open database: %s\n", 
	`sqlite3_errmsg
(
db
));

49 
	`fprintf
(
stdout
, "Opened database successfully\n");

54 
sql
 = "SELECT * from COMPANY";

57 
rc
 = 
	`sqlite3_exec
(
db
, 
sql
, 
callback
, (void*)
data
, &
zErrMsg
);

59 if( 
rc
 != 
SQLITE_OK
 ) {

60 
	`fprintf
(
stderr
, "SQL error: %s\n", 
zErrMsg
);

61 
	`sqlite3_free
(
zErrMsg
);

63 
	`fprintf
(
stdout
, "Operation done successfully\n");

70 
	`sqlite3_close
(
db
);

72 
	}
}

	@cDodoCIS.c

1 #include 
	~<stdio.h
>

2 #include 
	~<stdlib.h
>

3 #include 
	~<sqlite3.h
>

5 static int 
	$callback
(void *
NotUsed
, int 
argc
, char **
argv
, char **
azColName
) {

6 int 
i
;

7 for(
i
 = 0; i<
argc
; i++) {

8 
	`printf
("%s = %s\n", 
azColName
[
i
], 
argv
[i] ? argv[i] : "NULL");

10 
	`printf
("\n");

12 
	}
}

14 int 
	$main
(int 
argc
, char* 
argv
[]) {

15 
sqlite3
 *
db
;

16 char *
zErrMsg
 = 0;

17 int 
rc
;

18 char *
sql
;

19 const char* 
data
 = "Callback function called";

22 
rc
 = 
	`sqlite3_open
("dodo10.db", &
db
);

24 if( 
rc
 ) {

25 
	`fprintf
(
stderr
, "Can't open database: %s\n", 
	`sqlite3_errmsg
(
db
));

28 
	`fprintf
(
stdout
, "Opened database successfully\n");

32 
sql
="CREATE TABLE COMPANY(" \

39 
rc
 = 
	`sqlite3_exec
(
db
, 
sql
, 
callback
, 0, &
zErrMsg
);

41 if( 
rc
 != 
SQLITE_OK
 ){

42 
	`fprintf
(
stderr
, "SQL error: %s\n", 
zErrMsg
);

43 
	`sqlite3_free
(
zErrMsg
);

45 
	`fprintf
(
stdout
, "Table created successfully\n");

50 
sql
 = "INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) " \

60 
rc
 = 
	`sqlite3_exec
(
db
, 
sql
, 
callback
, 0, &
zErrMsg
);

62 if( 
rc
 != 
SQLITE_OK
 ){

63 
	`fprintf
(
stderr
, "SQL error: %s\n", 
zErrMsg
);

64 
	`sqlite3_free
(
zErrMsg
);

66 
	`fprintf
(
stdout
, "Records created successfully\n");

71 
sql
 = "SELECT * from COMPANY";

74 
rc
 = 
	`sqlite3_exec
(
db
, 
sql
, 
callback
, (void*)
data
, &
zErrMsg
);

76 if( 
rc
 != 
SQLITE_OK
 ) {

77 
	`fprintf
(
stderr
, "SQL error: %s\n", 
zErrMsg
);

78 
	`sqlite3_free
(
zErrMsg
);

80 
	`fprintf
(
stdout
, "Operation done successfully\n");

85 
	`sqlite3_close
(
db
);

87 
	}
}

	@cDodoCheck.c

1 #include 
	~<stdio.h
>

2 #include 
	~<sqlite3.h
>

3 int 
	$main
(int 
argc
, char* 
argv
[]) {

4 
sqlite3
 *
db
;

5 char *
zErrMsg
 = 0;

6 int 
rc
;

8 
rc
 = 
	`sqlite3_open
("dodo10.db", &
db
);

10 if( 
rc
 ) {

11 
	`fprintf
(
stderr
, "Can't open database: %s\n", 
	`sqlite3_errmsg
(
db
));

14 
	`fprintf
(
stderr
, "AAA Opened database successfully\n");

16 
	`sqlite3_close
(
db
);

18 
	}
}

	@cDodoSel.c

18 #include 
	~<stdlib.h
>

19 #include 
	~<stdio.h
>

20 #include 
	~<sqlite3.h
>

22 static int 
	$callback
(void *
NotUsed
, int 
argc
, char **
argv
, char **
azColName
) {

23 int 
i
;

24 for(
i
 = 0; i<
argc
; i++) {

25 
	`printf
("%s = %s\n", 
azColName
[
i
], 
argv
[i] ? argv[i] : "NULL");

27 
	`printf
("\n");

29 
	}
}

31 int 
	$main
(int 
argc
, char* 
argv
[]) {

32 
sqlite3
 *
db
;

33 char *
zErrMsg
 = 0;

34 int 
rc
;

35 char *
sql
;

36 const char* 
data
 = "Callback function called";

39 
rc
 = 
	`sqlite3_open
("dodo10.db", &
db
);

41 if( 
rc
 ) {

42 
	`fprintf
(
stderr
, "Can't open database: %s\n", 
	`sqlite3_errmsg
(
db
));

45 
	`fprintf
(
stdout
, "Opened database successfully\n");

50 
sql
 = "SELECT * from COMPANY";

53 
rc
 = 
	`sqlite3_exec
(
db
, 
sql
, 
callback
, (void*)
data
, &
zErrMsg
);

55 if( 
rc
 != 
SQLITE_OK
 ) {

56 
	`fprintf
(
stderr
, "SQL error: %s\n", 
zErrMsg
);

57 
	`sqlite3_free
(
zErrMsg
);

59 
	`fprintf
(
stdout
, "Operation done successfully\n");

64 
	`sqlite3_close
(
db
);

66 
	}
}

	@cDodoSelAll.c

1 #include 
	~<stdio.h
>

2 #include 
	~<stdlib.h
>

3 #include 
	~<sqlite3.h
>

6 int 
	$main
 ()

8 
sqlite3
 * 
db
;

9 char * 
sql
;

10 
sqlite3_stmt
 * 
stmt
;

11 int 
nrecs
;

12 char * 
errmsg
;

13 int 
i
;

14 int 
row
 = 0;

16 
	`CALL_SQLITE
 (
	`open
 ("dodo10.db", & 
db
));

17 
sql
 = "SELECT * FROM COMPANY";

18 
	`CALL_SQLITE
 (
	`prepare_v2
 (
db
, 
sql
, 
	`strlen
 (sql) + 1, & 
stmt
, 
NULL
));

21 int 
s
;

23 
s
 = 
	`sqlite3_step
 (
stmt
);

24 if (
s
 == 
SQLITE_ROW
) {

25 int 
bytes
;

26 const unsigned char * 
text
;

27 
bytes
 = 
	`sqlite3_column_bytes
 (
stmt
, 0);

28 
text
 = 
	`sqlite3_column_text
 (
stmt
, 0);

29 
	`printf
 ("%d: %s\n", 
row
, 
text
);

30 
row
++;

32 else if (
s
 == 
SQLITE_DONE
) {

36 
	`fprintf
 (
stderr
, "Failed.\n");

37 
	`exit
 (1);

41 
	}
}

	@cNoSQLi.c

1 #include 
	~<iostream
>

2 #include 
	~<sqlite3.h
>

3 #include 
	~<stdlib.h
>

7 
using
 
namespace
 
	gstd
;

9 static int 
	$callback
(void *
NotUsed
, int 
argc
, char **
argv
, char **
azColName
)

11 int 
i
;

12 
cout
 << "Number of args= " << 
argc
 << 
endl
;

14 for(
i
=0; i<
argc
; i++)

16 
cout
 << 
azColName
[
i
] << " = " << (
argv
[i] ? argv[i] : "NULL") << 
endl
;

18 
cout
 << 
endl
;

20 
	}
}

22 int 
	$main
(int 
argc
, char **
argv
)

24 
sqlite3
 *
db
;

25 char *
zErrMsg
 = 0;

29 int 
rc
 = 
	`sqlite3_open
("/tmp/bedrock.db", &
db
);

30 if( 
rc
 )

32 
cerr
 << "Can't open database: " << 
	`sqlite3_errmsg
(
db
) << 
endl
;

33 
	`sqlite3_close
(
db
);

34 
	`exit
(1);

39 const char *
zSql
 = "INSERT INTO employee(Name, Dept, jobTitle) VALUES('Barney Rubble','Sales','Neighbor')";

41 
sqlite3_stmt
 *
ppStmt
;

42 const char **
pzTail
;

44 if( 
	`sqlite3_prepare_v2
(
db
, 
zSql
, 
	`strlen
(zSql)+1, &
ppStmt
, 
pzTail
) != 
SQLITE_OK
 )

46 
cerr
 << "db error: " << 
	`sqlite3_errmsg
(
db
) << 
endl
;

49 if(
ppStmt
)

51 
	`sqlite3_step
(
ppStmt
);

52 
	`sqlite3_finalize
(
ppStmt
);

53 
	`sqlite3_exec
(
db
, "COMMIT", 
NULL
, NULL, NULL);

57 
cerr
 << "Error: ppStmt is NULL" << 
endl
;

62 
rc
 = 
	`sqlite3_exec
(
db
,"select * from employee", 
callback
, 0, &
zErrMsg
);

63 if( 
rc
!=
SQLITE_OK
 )

65 
cerr
 << "SQL error: " << 
zErrMsg
 << 
endl
;

66 
	`sqlite3_free
(
zErrMsg
);

68 
	`sqlite3_close
(
db
);

71 
	}
}

	@cStrgCp.c

18 #include 
	~<stdlib.h
>

19 #include 
	~<stdio.h
>

21 int 
	$main
() {

22 char 
s1
[] = "TajMahal";

23 char 
s2
[8];

24 
	`printf
("Value in s1 = %s \n", 
s1
);

25 
	`printf
("Value in s2 = %s \n", 
s2
);

27 int 
length
 = 0;

29 while(
s1
[
length
] != '\0') {

30 
s2
[
length
] = 
s1
[length];

31 
length
++;

34 
s2
[
length
] = '\0';

36 
	`printf
("Value in s1 = %s \n", 
s1
);

37 
	`printf
("Value in s2 = %s \n", 
s2
);

40 
	}
}

	@cSwitch.c

19 #include 
	~<stdlib.h
>

20 #include 
	~<stdio.h
>

21 int 
	$main
()

23 int 
num
;

24 
	`printf
("Enter value of num:");

25 
	`scanf
("%d",&
num
);

28 switch (
num
)

31 
	`printf
("You have entered value 1\n");

34 
	`printf
("You have entered value 2\n");

37 
	`printf
("You have entered value 3\n");

40 
	`printf
("Input value is other than 1,2 & 3 ");

43 
	}
}

	@cTri.c

18 #include 
	~<stdlib.h
>

19 #include 
	~<stdio.h
>

21 int 
	$main
() {

22 int 
n
,
i
,
j
;

24 
n
 = 5;

26 for(
i
 = 1; i <= 
n
; i++) {

27 for(
j
 = 1; j <= 
n
-
i
; j++)

28 
	`printf
(" ");

30 for(
j
 = 1; j <= 
i
; j++)

31 
	`printf
("* ");

33 
	`printf
("\n");

36 
	}
}

	@hello.cpp

19 #include 
	~<stdlib.h
>

20 #include 
	~<iostream
>

22 int 
	$main
()

24 
std
::
cout
 << "Hello World!" << std::
endl
;

27 
	}
}

	@
1
.
0
10
110
c2DodoSel.cpp
cDodoCIS.c
cDodoCheck.c
cDodoSel.c
cDodoSelAll.c
cNoSQLi.c
cStrgCp.c
cSwitch.c
cTri.c
hello.cpp
