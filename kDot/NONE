https://github.com/ryanoasis/nerd-fonts.git





{
ff
# 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
# 4DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
2DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
1DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
0DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
        }


"-Always open read-only when a swap file is found
autocmd! vimrc SwapExists * let v:swapchoice = 'o'
set noswapfile
nnoremap  <Esc><Esc> :<C-u>set nopaste<CR>:nohlsearch<CR>
silent! set wrapscan ignorecase smartcase incsearch hlsearch magic

pip install -U pytest
pip install hypothesis

"--------------------------------------------------------------------------------- "
$ pip install nose2
$ python -m nose2
"--------------------------------------------------------------------------------- "
How to Write Assertions

The last step of writing a test is to validate the output against a known response. This is known as an assertion. There are some general best practices around how to write assertions:

    Make sure tests are repeatable and run your test multiple times to make sure it gives the same result every time
    Try and assert results that relate to your input data, such as checking that the result is the actual sum of values in the sum() example

unittest comes with lots of methods to assert on the values, types, and existence of variables. Here are some of the most commonly used methods:
Method 	Equivalent to
.assertEqual(a, b) 	a == b
.assertTrue(x) 	bool(x) is True
.assertFalse(x) 	bool(x) is False
.assertIs(a, b) 	a is b
.assertIsNone(x) 	x is None
.assertIn(a, b) 	a in b
.assertIsInstance(a, b) 	isinstance(a, b)

.assertIs(), .assertIsNone(), .assertIn(), and .assertIsInstance() all have opposite methods, named .assertIsNot(), and so forth.
"--------------------------------------------------------------------------------- "

"--------------------------------------------------------------------------------- "
Testing for Security Flaws in Your Application

Another test you will want to run on your application is checking for common security mistakes or vulnerabilities.

You can install bandit from PyPI using pip:

$ pip install bandit
"--------------------------------------------------------------------------------- "
tox

tox is a tool for automating test environment management and testing against multiple interpreter configurations.

$ pip install tox


"--------------------------------------------------------------------------------- "
For older versions of Python:

$ pip install mock

It allows you to replace parts of your system under test with mock objects and make assertions about how they have been used.

For example, you can monkey-patch a method:

from mock import MagicMock
thing = ProductionClass()
thing.method = MagicMock(return_value=3)
thing.method(3, 4, 5, key='value')

thing.method.assert_called_with(3, 4, 5, key='value')


"--------------------------------------------------------------------------------- "
tig is configured in your ~/.gitconfig file. I have the following section there:

Copy
[tig]
  show-date = relative
  show-rev-graph = yes
"--------------------------------------------------------------------------------- "

git config merge.tool vimdiff
:call deoplete#sources#padawan#InstallServer()
call deoplete#sources#padawan#InstallServer()
   
        https://github.com/aitjcize/cppman
        Plug 'ternjs/tern_for_vim', { 'do': 'npm install && npm install -g tern' }
        i have to go over nTips


        /home/red/git/bTest/DICT/

        select


function! ExampleFunction(arg1, arg2)
python << endPython

import vim

def greeting():
    title = vim.eval("a:arg1")
    name = vim.eval("a:arg2")
    print("Hello,\n {}. {}".format(title, name))

greeting()

endPython
endfunction

command! ExFunction1 call ExampleFunction("Mr", "Jarrod Taylor")


function! s:tag_handler(tag)
        if !empty(a:tag)
        let token = split(split(a:tag, '\t')[2],';"')[0]
        let m = &magic
        setlocal nomagic
        execute token
        if m
                setlocal magic
        endif
        endif
endfunction
nnoremap <silent> <Leader>t :FZFTagA<cr>


"--------------------------------------------------------------------------------- "
function! JumpToInSplit(jumpcommand)
        execute "normal! \<c-w>v"
        execute a:jumpcommand
        Pulse
endfunction


function! JumpToTagInSplit()
        call JumpToInSplit("normal! \<c-]>")
endfunction

"--------------------------------------------------------------------------------- "
function! MS2UTC(ms)
    let seconds = strpart(a:ms, 0, strlen(a:ms) - 3)
    return substitute(system("date -ur " . seconds), "\n\n*", "", "")
endfunction

0DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
1DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
2DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
4DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 5DEO 
{}
