

go get -u -v github.com/nsf/gocode
# OR mdempsky/gocode for better performance
go get -u -v github.com/mdempsky/gocode

go get -u -v github.com/golang/lint/golint
go get -u -v golang.org/x/tools/cmd/guru
go get -u -v golang.org/x/tools/cmd/goimports
go get -u -v golang.org/x/tools/cmd/gorename

go get -u -v github.com/nsf/gocode
go get -u -v golang.org/x/tools/cmd/goimports
go get -u -v golang.org/x/tools/cmd/guru
go get -u -v golang.org/x/tools/cmd/gorename


gocode for auto-completion
go-outline for symbol search in the current file
go-symbols for symbol search in the current workspace
gopkgs for auto-completion of unimported packages
guru for the Find all References feature
gorename for renaming symbols
goreturns or goimports for formatting code
godef or gogetdoc for the Go to Definition feature
godoc or gogetdoc for the documentation that appears on hover
golint or gometalinter or megacheck or golangci-lint or revive for linting
dlv for debugging

If any of these tools are missing, you will see an "Analysis Tools Missing" warning in the bottom right corner of the editor. Clicking it will offer to install the missing tools for you.

There are other features of this extension which you most probably wouldn't be using every day. For eg: Generating unit tests or generating stubs for interface or modify tags. The tools used for such features are:

gomodifytags for modifying tags on structs
goplay for running current file in the Go playground
impl for generating stubs for interfaces
gotype-live for providing diagnostics as you type
gotests for generating unit tests
go-langserver for using the Go language server by Sourcegraph
fillstruct for filling a struct literal with default values
================================================================================================================
================================================================================================================
# .bashrc

gvm use go1.2.1 > /dev/null 2>&1
export PATH="${GOPATH//://bin:}/bin:$PATH"

Now run gvm pkgenv and edit the setting of GOPATH to include your workspace (as required):

...
export GOPATH; GOPATH="$HOME/gostuff:$GVM_ROOT/pkgsets/go1.2.1/global"
...

Now restart your terminal or simply exec bash. The following commands should now work:

$ echo $GOROOT
/home/myitcv/.gvm/gos/go1.2.1
$ echo $GOPATH
/home/myitcv/gostuff:/home/myitcv/.gvm/pkgsets/go1.2.1/global
$ go version
go version go1.2.1 linux/amd64

Step 4. Install Go tools

These tools will help with omnicomplete (code completion), syntax checking, 'go to definition' support and ctags for Go:

$ go get -u github.com/nsf/gocode
$ go get -u code.google.com/p/rog-go/exp/cmd/godef
$ go get -u github.com/jstemmer/gotags

These three commands will fetch, build and install three tools:

$ which godef
/home/myitcv/gostuff/bin/godef
$ which gocode
/home/myitcv/gostuff/bin/gocode
$ which gotags
/home/myitcv/gostuff/bin/gotags
$ which gofmt
/home/myitcv/.gvm/gos/go1.2.1/bin/gofmt

gofmt is, as you can see, distributed as part of the main Go package.

[ ] :GoInstallBinaries
================================================================================================================

f you change the command used by :GoFmt to goimports, it will also manage your
imports (e.g., by inserting the missing “fmt” import in the above example):

" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"

Automatically formatting and importing packages on save is a popular choice;
but if you feel it is slowing down Vim or confusing you, you can disable it:

" disable fmt on save
let g:go_fmt_autosave = 0

You can still use :GoFmt to manually fix up your code.
Import management

If you’re not using goimports as your formatter (and, sometimes, even if you
are), you’ll need to manage your imports list. vim-go provides a few useful
commands for this:

================================================================================================================
    :GoImport [path]: adds "path" to the correct place in the list of imports.
    :GoImportAs [name] [path]: adds name "path" to the correct place in the list of imports.
    :GoDrop [path]: drops package from the list of imports.
    :GoImports: runs goimports on the file.

Documentation

Go’s browser-based documentation tools are great, but it’s often useful to
have quick access to the docs you need from within Vim. For that, there’s
:GoDoc. It displays Go documentation in a split pane, and can be called a few
ways:

    :GoDoc: with no arguments, this will look up the identifier under the
    cursor; note that it is only able to look up top-level identifiers like
    fmt.Println, os.O_RDONLY, and bytes.Buffer.

    :GoDoc package: brings up the documentation for a package; for example :GoDoc fmt.

    :GoDoc package name: brings up the function/type/identifier documentation;
    for example :GoDoc json/encoding NewEncoder or :GoDoc os FileInfo.

And more

vim-go provides a number of other commands (like :GoBuild and :GoTest), as well
as configuration options, so be sure to read through :help vim-go to learn
more!

================================================================================================================
    scrooloose/syntastic
    dgryski/vim-godef
    Blackrush/vim-gocode
    majutsushi/tagbar
    bling/vim-airline

================================================================================================================
    ack.vim
    bclose.vim
    bufexplorer
    nerdtree
    nerdcommenter
    csapprox
    vim-fugitive
    gitv
    vim-gitgutter
    syntastic
    neocomplete.vim
    neosnippet.vim
    auto-pairs

================================================================================================================
================================================================================================================
================================================================================================================
